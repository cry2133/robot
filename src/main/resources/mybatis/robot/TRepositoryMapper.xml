<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.robot.robot.dao.TRepositoryDao">

	<select id="get" resultType="com.robot.robot.domain.TRepositoryDO">
		select rst.`repository_id`,rst.`name`,rst.`property`,rst.`units`,rst.`creater`,rst.`createtime`,rst.`priority`,
		rst.`role_id` as roleId,sr.role_name as roleName
		from t_repository rst
		left join sys_role sr
		on rst.role_id = sr.role_id
		where rst.repository_id = #{value}
	</select>

	<select id="list" resultType="com.robot.robot.domain.TRepositoryDO">
		select rst.`repository_id`,rst.`name`,rst.`property`,rst.`units`,rst.`creater`,rst.`createtime`,rst.`priority`,
		rst.`role_id` as roleId,sr.role_name as roleName
		from t_repository rst
		left join sys_role sr
		on rst.role_id = sr.role_id
        <where>  
		  		  <if test="repositoryId != null and repositoryId != ''"> and rst.repository_id = #{repositoryId} </if>
		  		  <if test="name != null and name != ''"> and rst.name like #{name} </if>
		  		  <if test="property != null and property != ''"> and rst.property = #{property} </if>
		  		  <if test="units != null and units != ''"> and rst.units like #{units} </if>
		  		  <if test="creater != null and creater != ''"> and rst.creater = #{creater} </if>
		  		  <if test="createtime != null and createtime != ''"> and rst.createtime = #{createtime} </if>
		  		</where>
        <choose>
            <when test="sort != null and sort.trim() != ''">
                order by ${sort} ${order}
            </when>
			<otherwise>
               ORDER BY if(isnull(priority),1,0),priority, repository_id
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="count" resultType="int">
		select count(*) from t_repository
		 <where>  
		 	<if test="repositoryId != null and repositoryId != ''"> and repository_id = #{repositoryId} </if>
		  	<if test="name != null and name != ''"> and name like #{name} </if>
		  	<if test="property != null and property != ''"> and property = #{property} </if>
		 	<if test="units != null and units != ''"> and units = #{units} </if>
		 	<if test="creater != null and creater != ''"> and creater = #{creater} </if>
		 	<if test="createtime != null and createtime != ''"> and createtime = #{createtime} </if>
			<if test="roleId != null and roleId != ''"> and role_id = #{roleId} </if>
		  </where>
	</select>
	 
	<insert id="save" parameterType="com.robot.robot.domain.TRepositoryDO" useGeneratedKeys="true" keyProperty="repositoryId">
		insert into t_repository
		(
			`name`, 
			`property`, 
			`units`, 
			`creater`, 
			`createtime`,
			`priority`,
			`role_id`
		)
		values
		(
			#{name}, 
			#{property}, 
			#{units}, 
			#{creater}, 
			#{createtime},
			#{priority},
			#{roleId}
		)
	</insert>
	 
	<update id="update" parameterType="com.robot.robot.domain.TRepositoryDO">
		update t_repository 
		<set>
			<if test="name != null">`name` = #{name}, </if>
			<if test="property != null">`property` = #{property}, </if>
			<if test="units != null">`units` = #{units}, </if>
			<if test="creater != null">`creater` = #{creater}, </if>
			<if test="createtime != null">`createtime` = #{createtime},</if>
			<if test="priority != null">`priority` = #{priority},</if>
			<if test="roleId != null">`role_id` = #{roleId},</if>
		</set>
		where repository_id = #{repositoryId}
	</update>
	
	<delete id="remove">
		delete from t_repository where repository_id = #{value}
	</delete>
	
	<delete id="batchRemove">
		delete from t_repository where repository_id in 
		<foreach item="repositoryId" collection="array" open="(" separator="," close=")">
			#{repositoryId}
		</foreach>
	</delete>

	<select id="getByName" resultType="com.robot.robot.domain.TRepositoryDO">
		select `repository_id`,`name`,`property`,`units`,`creater`,`createtime`,`priority`,`role_id` as roleId
		from t_repository
		where name = #{value}
	</select>
</mapper>